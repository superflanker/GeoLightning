Metadata-Version: 2.4
Name: GeoLightning
Version: 0.1.0
Summary: Sistema de geolocalização de descargas atmosféricas utilizando algoritmos genéticos
Home-page: https://github.com/superflanker/GeoLightning
Author: Augusto Mathias Adams
Author-email: augusto.adams@ufpr.br
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: alabaster>=1.0.0
Requires-Dist: anyio>=4.9.0
Requires-Dist: babel>=2.17.0
Requires-Dist: certifi>=2025.4.26
Requires-Dist: charset-normalizer>=3.4.2
Requires-Dist: click>=8.2.1
Requires-Dist: colorama>=0.4.6
Requires-Dist: contourpy>=1.3.2
Requires-Dist: coverage>=7.8.2
Requires-Dist: cycler>=0.12.1
Requires-Dist: docutils>=0.21.2
Requires-Dist: exceptiongroup>=1.3.0
Requires-Dist: fonttools>=4.58.2
Requires-Dist: h11>=0.16.0
Requires-Dist: idna>=3.10
Requires-Dist: imagesize>=1.4.1
Requires-Dist: iniconfig>=2.1.0
Requires-Dist: Jinja2>=3.1.6
Requires-Dist: joblib>=1.5.1
Requires-Dist: kiwisolver>=1.4.8
Requires-Dist: llvmlite>=0.44.0
Requires-Dist: markdown-it-py>=3.0.0
Requires-Dist: MarkupSafe>=3.0.2
Requires-Dist: matplotlib>=3.10.3
Requires-Dist: mdit-py-plugins>=0.4.2
Requires-Dist: mdurl>=0.1.2
Requires-Dist: mealpy>=3.0.2
Requires-Dist: mpmath>=1.3.0
Requires-Dist: myst-parser>=4.0.1
Requires-Dist: numba>=0.61.2
Requires-Dist: numpy>=2.2.6
Requires-Dist: opfunu>=1.0.4
Requires-Dist: packaging>=25.0
Requires-Dist: pandas>=2.3.0
Requires-Dist: pillow>=11.2.1
Requires-Dist: pluggy>=1.6.0
Requires-Dist: Pygments>=2.19.1
Requires-Dist: pyparsing>=3.2.3
Requires-Dist: pytest>=8.4.0
Requires-Dist: pytest-cov>=6.1.1
Requires-Dist: python-dateutil>=2.9.0.post0
Requires-Dist: pytz>=2025.2
Requires-Dist: PyYAML>=6.0.2
Requires-Dist: requests>=2.32.4
Requires-Dist: scikit-learn>=1.7.0
Requires-Dist: scipy>=1.15.3
Requires-Dist: six>=1.17.0
Requires-Dist: sniffio>=1.3.1
Requires-Dist: snowballstemmer>=3.0.1
Requires-Dist: Sphinx>=8.1.3
Requires-Dist: sphinx-autobuild>=2024.10.3
Requires-Dist: sphinx-rtd-theme>=3.0.2
Requires-Dist: sphinxcontrib-applehelp>=2.0.0
Requires-Dist: sphinxcontrib-devhelp>=2.0.0
Requires-Dist: sphinxcontrib-htmlhelp>=2.1.0
Requires-Dist: sphinxcontrib-jquery>=4.1
Requires-Dist: sphinxcontrib-jsmath>=1.0.1
Requires-Dist: sphinxcontrib-qthelp>=2.0.0
Requires-Dist: sphinxcontrib-serializinghtml>=2.0.0
Requires-Dist: starlette>=0.47.0
Requires-Dist: sympy>=1.14.0
Requires-Dist: threadpoolctl>=3.6.0
Requires-Dist: tomli>=2.2.1
Requires-Dist: typing_extensions>=4.14.0
Requires-Dist: tzdata>=2025.2
Requires-Dist: urllib3>=2.4.0
Requires-Dist: uvicorn>=0.34.3
Requires-Dist: watchfiles>=1.1.0
Requires-Dist: websockets>=15.0.1
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# GeoLightning: Detection and Localization of Lightning Discharges Using STELA

[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)

GeoLightning is a Python package for the **spatiotemporal estimation of geophysical events**, with emphasis on **lightning discharge localization** using the **STELA algorithm**. It supports advanced **metaheuristic optimization** through seamless integration with the [MEALPY](https://pypi.org/project/mealpy/) framework.

---

## 🔍 Overview

This project models the detection of geophysical events by multiple distributed sensors. The key algorithm, `stela()`, performs **spatial and temporal clustering** based on time-of-arrival (TOA) data and location information.

GeoLightning supports flexible optimization by wrapping the problem in a `StelaProblem` class compatible with any MEALPY algorithm. A specialized version `StelaPSO` (and others) adds adaptive search space refinement to improve convergence.

---

## 📦 Main Components

- `StelaProblem`: Problem wrapper for MEALPY optimizers.
- `StelaPSO`: Custom PSO with search-space refinement.
- `StelaAOA`: Custom AOA with search-space refinement.
- `StelaGWO`: Custom GWO with search-space refinement.
- `StelaGA`: Custom GA with search-space refinement.
- `StelaLSA`: Custom LSA with search-space refinement.
- `StelaFHO`: Custom FHO with search-space refinement.
- `StelaESO`: Custom ESO with search-space refinement.
- `stela()`: Core algorithm performing spatiotemporal clustering and likelihood estimation.

---

## 🛠 Dependencies

GeoLightning relies on the following Python libraries:

- [NumPy](https://pypi.org/project/numpy/)
- [SciPy](https://pypi.org/project/scipy/)
- [Matplotlib](https://pypi.org/project/matplotlib/)
- [Pandas](https://pypi.org/project/pandas/)
- [Numba](https://pypi.org/project/numba/)
- [MEALPY](https://pypi.org/project/mealpy/)
- [opfunu](https://pypi.org/project/opfunu/)
- [pytest](https://pypi.org/project/pytest/)
- [pytest-cov](https://pypi.org/project/pytest-cov/)
- [requests](https://pypi.org/project/requests/)
- [python-dateutil](https://pypi.org/project/python-dateutil/)
- [typing-extensions](https://pypi.org/project/typing-extensions/)
- [urllib3](https://pypi.org/project/urllib3/)
- [six](https://pypi.org/project/six/)
- [tzdata](https://pypi.org/project/tzdata/)
- and others (see `setup.py` or `requirements.txt` for full list)

---

## 📁 Project Structure


```
GeoLightning/
├── GeoLightning/
│   ├── GraphUtils/            # Plot Utilities
│   ├── HyperParameters/       # Parameter Tuning Utility
│   ├── Runners/               # Convenience Wrappers for Mealpy Solvers
│   ├── Simulator/             # Sensor modeling and synthetic data
│   ├── Solvers/               # STELA wrappers and metaheuristics
│   ├── Stela/                 # Core spatiotemporal clustering and likelihood
│   └── Utils/                 # Coordinate tools and constants
├── tests/                     # Unit tests for each core module
├── LICENSE
├── README.md
└── setup.py
```

---

## 🧪 Running Experiments

To run an optimization experiment with any MEALPY algorithm:

```python
from GeoLightning.Solvers.StelaPSO import StelaPSO
from GeoLightning.Solvers.StelaProblem import StelaProblem

# Define bounds, arrival points and times...
problem = StelaProblem(bounds, "min", arrival_points, arrival_times)
problem.cluster_it()
model = StelaPSO(epoch=100, pop_size=50)
best_solution, best_fitness = model.solve(problem)
```
---

## 📄 Reference

This implementation is based on the following research article:

> **Adams, A.M.**, *Origin Estimation and Event Separation in Time-of-Arrival Localization of Lightning Events*, 2025 (in review).

---

## 📚 How to Cite

If you use **GeoLightning** in your research, please cite:

```bibtex
@misc{adams2025geolightning,
  author    = {Augusto Mathias Adams},
  title     = {GeoLightning: Detection and Localization of Lightning Discharges Using STELA},
  year      = {2025},
  howpublished = {\url{https://github.com/superflanker/GeoLightning}}
}
```
